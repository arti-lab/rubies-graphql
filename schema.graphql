"""
Autogenerated input type of AddContestTemplateToPlayground
"""
input AddContestTemplateToPlaygroundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ID!
  playground: ID!
}

"""
Autogenerated return type of AddContestTemplateToPlayground
"""
type AddContestTemplateToPlaygroundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ContestTemplate
  errors: [String!]!
  playground: Playground
}

"""
Autogenerated input type of AddEventPartyMembers
"""
input AddEventPartyMembersInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventParty: ID!
  userSlugs: [String!]!
}

"""
Autogenerated return type of AddEventPartyMembers
"""
type AddEventPartyMembersPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  eventParty: EventParty
}

"""
Autogenerated input type of AddModerators
"""
input AddModeratorsInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ID!
  userSlugs: [String!]!
}

"""
Autogenerated return type of AddModerators
"""
type AddModeratorsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ContestTemplate
  errors: [String!]!
  me: User!
  users: [User!]
}

type Admin implements Node {
  activeLiveSession: LiveSession
  activeSessions: [LiveSession!]!
  activeUsers: [User!]!
  amIFollowing: Boolean
  avatarUrl: String
  badges(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: BadgeFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): UserContestBadgesConnection
  beaconGame: String
  beaconGameName: String
  beaconMessage: String
  beaconPrivacy: UserBeaconPrivacy!
  beaconStatus: UserBeaconStatus
  createdPlaygrounds: [Playground!]
  description: String
  discordName: String
  email: String!
  followedContests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: ContestTemplateFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): FollowedContestsConnection
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: UserFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): UserFollowersConnection
  following(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: UserFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): UserFollowingsConnection
  id: ID!
  isClaimed: Boolean!
  isVerifiedHost: Boolean
  isVisorAdmin: Boolean!
  joinedPlaygrounds: [Playground!]
  liveSessions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): UserLiveSessionsConnection
  myContests: [ContestTemplate!]
  myModeratedContests: [ContestTemplate!]
  notificationSetting: NotificationSetting
  overwatchRank: String
  paypalEmail: String
  pendingRequestedProfileUpdates: [ProfileUpdateRequest!]
  rtmpUrl: String
  slug: String!
  socialDiscord: String
  socialLink: String
  socialMixer: String
  socialPrivacyDiscord: String
  socialPrivacyMixer: String
  socialPrivacyTwitch: String
  socialPrivacyTwitter: String
  socialPrivacyYoutube: String
  socialTwitch: String
  socialTwitter: String
  socialYoutube: String
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): UserSponsorsConnection
  streamKey: String
  streamLogin: String
  streamPlatform: StreamPlatform
  updatedAt: DateTime!
  username: String!
  venmoAccount: String
}

"""
Autogenerated input type of AlertMod
"""
input AlertModInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: String
  modDiscordName: String!
  userDiscordName: String
}

"""
Autogenerated return type of AlertMod
"""
type AlertModPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  success: Boolean!
}

type Attendance implements Node {
  attendee: User!
  createdAt: DateTime!
  endTime: DateTime!
  id: ID!
  startTime: DateTime!
  updatedAt: DateTime!
}

"""
An edge in a connection.
"""
type AttendancesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Attendance
}

type Badge implements Node {
  contestTemplate: ContestTemplate!
  id: ID!
  name: String!
  url: String!
}

"""
Filters for badges
"""
input BadgeFilters {
  contestTemplateSlug: String
}

"""
An edge in a connection.
"""
type BadgesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Badge
}

"""
Operators for filtering on booleans
"""
input BooleanOperators {
  eq: Boolean
}

type Contest implements Node {
  chatChannelName: String!
  config: JSON
  contestTemplate: ContestTemplate!
  description: String!
  doorsOpen: Boolean!
  doorsOpenTime: DateTime!
  durationSec: Int!
  endTime: DateTime
  formatDescShortMd: String
  game: Game!
  gameMode: String!
  hasEnded: Boolean!
  host: User!
  hostEntry: ContestParticipant
  id: ID!
  isActive: Boolean!
  leaderboardTitles: [String!]!
  myEntry: ContestParticipant
  myHundredThievesAttempts: JSON
  myParty: EventParty
  name: String!
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): ContestContestParticipantsConnection!
  parties(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): ContestEventPartiesConnection
  partySizeLimit: Int
  prizesDescShortMd: String
  prizesMd: String
  rulesMd: String
  scheduledEndTime: DateTime!
  scheduledStartTime: DateTime!
  scoreTypes: [String!]!
  slug: String!
  splashImgUrl: String!
  startTime: DateTime
  teamNames: [String!]!
}

"""
The connection type for Contest.
"""
type ContestChildrenConnection {
  """
  A list of edges.
  """
  edges: [ContestsEdge]

  """
  A list of nodes.
  """
  nodes: [Contest]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The connection type for ContestParticipant.
"""
type ContestContestParticipantsConnection {
  """
  A list of edges.
  """
  edges: [ContestParticipantsEdge]

  """
  A list of nodes.
  """
  nodes: [ContestParticipant]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The connection type for EventParty.
"""
type ContestEventPartiesConnection {
  """
  A list of edges.
  """
  edges: [EventPartiesEdge]

  """
  A list of nodes.
  """
  nodes: [EventParty]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Filters for contests
"""
input ContestFilters {
  durationSec: NumberOperators
  gameId: NumberOperators
  hostId: NumberOperators
  id: StringOperators
  isActive: BooleanOperators
  name: StringOperators
  scheduledStartTime: DateOperators
  slug: StringOperators
}

type ContestParticipant implements Node {
  id: ID!
  matches: [Match!]!
  party: EventParty
  placement: Int
  score: Int
  score2: Int
  streak: Int!
  team: String
  user: User!
}

"""
Filter for contest participants
"""
input ContestParticipantFilter {
  score: NumberOperators
}

"""
An edge in a connection.
"""
type ContestParticipantsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ContestParticipant
}

type ContestTemplate implements Node {
  amIFollowing: Boolean!
  canEdit: Boolean!
  config: JSON
  contests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: ContestFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): ContestChildrenConnection
  currentContest: Contest
  description: String!
  durationSec: Int!
  formatDescShortMd: String
  game: Game!
  hasDoorsOpenContest: Boolean!
  host: User!
  id: ID!
  inviteUrl: String!
  isFeatured: Boolean!
  mods: [User!]!
  name: String!
  playground: Playground
  prizesDescShortMd: String
  prizesMd: String
  recurrence: String
  rulesMd: String
  scheduledStartTime: DateTime!
  slug: String!
  splashImgUrl: String!
}

"""
Filters for contest templates
"""
input ContestTemplateFilters {
  durationSec: NumberOperators
  gameId: NumberOperators
  hostId: NumberOperators
  id: StringOperators
  isFeatured: BooleanOperators
  name: StringOperators
  scheduledStartTime: DateOperators
  slug: StringOperators
}

"""
An edge in a connection.
"""
type ContestTemplatesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ContestTemplate
}

"""
An edge in a connection.
"""
type ContestsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Contest
}

"""
Autogenerated input type of CreateContest
"""
input CreateContestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  config: JSON
  description: String
  durationSec: Int
  formatDescShortMd: String
  gameSlug: String!
  hostUsername: String
  isFeatured: Boolean
  name: String
  playground: ID!
  prizesDescShortMd: String
  prizesMd: String
  recurrence: String
  rulesMd: String
  scheduledStartTime: Int
  splashImgUrl: String
}

"""
Autogenerated return type of CreateContest
"""
type CreateContestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: Contest
  errors: [String!]!
}

"""
Autogenerated input type of CreateEventParty
"""
input CreateEventPartyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: ID!
}

"""
Autogenerated return type of CreateEventParty
"""
type CreateEventPartyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: Contest
  errors: [String!]!
  eventParty: EventParty
}

"""
Autogenerated input type of CreateOrUpdateMatch
"""
input CreateOrUpdateMatchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestSlug: String!
  matchId: String
  score: Int!
  score2: Int
  username: String!
}

"""
Autogenerated return type of CreateOrUpdateMatch
"""
type CreateOrUpdateMatchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  match: Match
}

"""
Autogenerated input type of CreatePlayground
"""
input CreatePlaygroundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  creatorUsername: String
  description: String
  name: String!
}

"""
Autogenerated return type of CreatePlayground
"""
type CreatePlaygroundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  me: User
  playground: Playground
}

"""
Autogenerated input type of CreateProfileUpdateRequest
"""
input CreateProfileUpdateRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  field: String!
  requesteeSlug: String!
  value: String!
}

"""
Autogenerated return type of CreateProfileUpdateRequest
"""
type CreateProfileUpdateRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  profileUpdateRequest: ProfileUpdateRequest
}

"""
Operators for filtering on dates
"""
input DateOperators {
  after: DateTime
  before: DateTime
  between: DateRange
  eq: DateTime
}

"""
Bounds for a range of dates
"""
input DateRange {
  end: DateTime!
  start: DateTime!
}

scalar DateTime

"""
Autogenerated input type of DeleteContest
"""
input DeleteContestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ID!
}

"""
Autogenerated return type of DeleteContest
"""
type DeleteContestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  playground: Playground
}

"""
Autogenerated input type of DeletePlayground
"""
input DeletePlaygroundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  playground: ID!
}

"""
Autogenerated return type of DeletePlayground
"""
type DeletePlaygroundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  me: User
}

"""
Autogenerated input type of EditContest
"""
input EditContestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  config: JSON
  contestTemplate: ID!
  description: String
  durationSec: Int
  formatDescShortMd: String
  gameSlug: String
  hostSlug: String
  hostUsername: String
  isFeatured: Boolean
  name: String
  prizesDescShortMd: String
  prizesMd: String
  recurrence: String
  rulesMd: String
  scheduledStartTime: Int
  splashImgUrl: String
}

"""
Autogenerated return type of EditContest
"""
type EditContestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: Contest
  errors: [String!]!
}

"""
Autogenerated input type of EditPlayground
"""
input EditPlaygroundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  name: String!
  playground: ID!
}

"""
Autogenerated return type of EditPlayground
"""
type EditPlaygroundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  playground: Playground
}

"""
Autogenerated input type of EndContest
"""
input EndContestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: ID!
}

"""
Autogenerated return type of EndContest
"""
type EndContestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: Contest
  errors: [String!]!
}

"""
Autogenerated input type of EndScrimMatchInContest
"""
input EndScrimMatchInContestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: ID!
  contestParticipant: ID
  eventParty: ID
}

"""
Autogenerated return type of EndScrimMatchInContest
"""
type EndScrimMatchInContestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: Contest
  errors: [String!]!
}

"""
An edge in a connection.
"""
type EventPartiesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: EventParty
}

type EventParty implements Node {
  amILeader: Boolean!
  id: ID!
  leader: ContestParticipant!
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: ContestParticipantFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): EventPartyContestParticipantsConnection
  placement: Int
  score: Int
}

"""
The connection type for ContestParticipant.
"""
type EventPartyContestParticipantsConnection {
  """
  A list of edges.
  """
  edges: [ContestParticipantsEdge]

  """
  A list of nodes.
  """
  nodes: [ContestParticipant]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Autogenerated input type of FollowContest
"""
input FollowContestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ID!
}

"""
Autogenerated return type of FollowContest
"""
type FollowContestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ContestTemplate
  errors: [String!]!
  me: User!
}

"""
Autogenerated input type of FollowUser
"""
input FollowUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  followee: ID!
}

"""
Autogenerated return type of FollowUser
"""
type FollowUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  me: User!
  user: User
}

"""
The connection type for ContestTemplate.
"""
type FollowedContestsConnection {
  """
  A list of edges.
  """
  edges: [ContestTemplatesEdge]

  """
  A list of nodes.
  """
  nodes: [ContestTemplate]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type Game implements Node {
  id: ID!
  name: String!
  slug: String!
}

type HelpInfo implements Node {
  content: String!
  id: ID!
  imageUrl: String
  subtopic: String!
  topic: String!
}

"""
Represents untyped JSON
"""
scalar JSON

"""
Autogenerated input type of JoinContest
"""
input JoinContestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: ID!
}

"""
Autogenerated return type of JoinContest
"""
type JoinContestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: Contest
  errors: [String!]!
}

"""
Autogenerated input type of JoinPlayground
"""
input JoinPlaygroundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  inviteUrl: String!
}

"""
Autogenerated return type of JoinPlayground
"""
type JoinPlaygroundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  me: User
  playground: Playground
}

"""
Autogenerated input type of LeavePlayground
"""
input LeavePlaygroundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  playground: ID!
}

"""
Autogenerated return type of LeavePlayground
"""
type LeavePlaygroundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  me: User
  playground: Playground
}

type LiveSession implements Node {
  activeAttendees: [User!]!
  attendances(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): LiveSessionAttendancesConnection
  createdAt: DateTime!
  endTime: DateTime!
  game: String
  host: User!
  id: ID!
  startTime: DateTime!
  title: String
  updatedAt: DateTime!
}

"""
The connection type for Attendance.
"""
type LiveSessionAttendancesConnection {
  """
  A list of edges.
  """
  edges: [AttendancesEdge]

  """
  A list of nodes.
  """
  nodes: [Attendance]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type LiveSessionsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: LiveSession
}

type Match implements Node {
  contestParticipant: ContestParticipant!
  id: ID!
  score: Int
  score2: Int
  uuid: String
}

type Mutation implements Node {
  addContestTemplateToPlayground(input: AddContestTemplateToPlaygroundInput!): AddContestTemplateToPlaygroundPayload!
  addEventPartyMembers(input: AddEventPartyMembersInput!): AddEventPartyMembersPayload!
  addModerators(input: AddModeratorsInput!): AddModeratorsPayload!
  alertMod(input: AlertModInput!): AlertModPayload
  createContest(input: CreateContestInput!): CreateContestPayload!
  createEventParty(input: CreateEventPartyInput!): CreateEventPartyPayload!
  createOrUpdateMatch(input: CreateOrUpdateMatchInput!): CreateOrUpdateMatchPayload!
  createPlayground(input: CreatePlaygroundInput!): CreatePlaygroundPayload!
  createProfileUpdateRequest(input: CreateProfileUpdateRequestInput!): CreateProfileUpdateRequestPayload!
  deleteContest(input: DeleteContestInput!): DeleteContestPayload!
  deletePlayground(input: DeletePlaygroundInput!): DeletePlaygroundPayload!
  editContest(input: EditContestInput!): EditContestPayload!
  editPlayground(input: EditPlaygroundInput!): EditPlaygroundPayload!
  endContest(input: EndContestInput!): EndContestPayload!
  endScrimMatchInContest(input: EndScrimMatchInContestInput!): EndScrimMatchInContestPayload!
  followContest(input: FollowContestInput!): FollowContestPayload!
  followUser(input: FollowUserInput!): FollowUserPayload!
  id: ID!
  joinContest(input: JoinContestInput!): JoinContestPayload!
  joinPlayground(input: JoinPlaygroundInput!): JoinPlaygroundPayload!
  leavePlayground(input: LeavePlaygroundInput!): LeavePlaygroundPayload!
  removeContestTemplateFromPlayground(input: RemoveContestTemplateFromPlaygroundInput!): RemoveContestTemplateFromPlaygroundPayload!
  removeEventPartyMember(input: RemoveEventPartyMemberInput!): RemoveEventPartyMemberPayload!
  removeModerator(input: RemoveModeratorInput!): RemoveModeratorPayload!
  resolveProfileUpdateRequest(input: ResolveProfileUpdateRequestInput!): ResolveProfileUpdateRequestPayload!
  startContest(input: StartContestInput!): StartContestPayload!
  unfollowContest(input: UnfollowContestInput!): UnfollowContestPayload!
  unfollowUser(input: UnfollowUserInput!): UnfollowUserPayload!
  updateMatch(input: UpdateMatchInput!): UpdateMatchPayload!
  updateNotificationSetting(input: UpdateNotificationSettingInput!): UpdateNotificationSettingPayload!
  updatePartyScoreAdjustment(input: UpdatePartyScoreAdjustmentInput!): UpdatePartyScoreAdjustmentPayload!
  updateUserBeaconMessage(input: UpdateUserBeaconMessageInput!): UpdateUserBeaconMessagePayload!
  updateUserBeaconStatus(input: UpdateUserBeaconStatusInput!): UpdateUserBeaconStatusPayload!
  updateUserSettings(input: UpdateUserSettingsInput!): UpdateUserSettingsPayload!
  uploadAvatar(input: UploadAvatarInput!): UploadAvatarPayload!
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

type NotificationSetting implements Node {
  contestChange: Boolean!
  contestDoorsOpen: Boolean!
  id: ID!
}

"""
Operators for filtering on numbers
"""
input NumberOperators {
  between: NumberRange
  eq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
}

"""
Bounds for a range of numbers
"""
input NumberRange {
  end: Float!
  start: Float!
}

"""
The connection type for User.
"""
type OnlineSubscribersConnection {
  """
  A list of edges.
  """
  edges: [UsersEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The connection type for User.
"""
type OnlineUsersConnection {
  """
  A list of edges.
  """
  edges: [UsersEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Playground implements Node {
  amIMember: Boolean
  avatarUrl: String
  chatChannelName: String!
  contestTemplates(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: ContestTemplateFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): PlaygroundContestTemplatesConnection
  contestTemplatesIHost: [ContestTemplate!]
  contestTemplatesIMod: [ContestTemplate!]
  contests: [Contest!]
  creator: User!
  description: String
  id: ID!
  inviteUrl: String!
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): PlaygroundMembersConnection
  name: String!
  slug: String!
}

"""
The connection type for ContestTemplate.
"""
type PlaygroundContestTemplatesConnection {
  """
  A list of edges.
  """
  edges: [ContestTemplatesEdge]

  """
  A list of nodes.
  """
  nodes: [ContestTemplate]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The connection type for User.
"""
type PlaygroundMembersConnection {
  """
  A list of edges.
  """
  edges: [UsersEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProfileUpdateRequest implements Node {
  field: String!
  id: ID!
  requestee: User!
  requestor: User!
  resolution: String!
  value: String!
}

type Query implements Node {
  """
  admin-specific queries
  """
  admin: Admin

  """
  Query contest by slug
  """
  contest(slug: String!): Contest

  """
  Query contest template by slug
  """
  contestTemplate(slug: String!): ContestTemplate

  """
  All contest templates
  """
  contestTemplates: [ContestTemplate!]

  """
  Query contest by slug
  """
  featuredContests: [Contest!]!

  """
  Get flash prize winner
  """
  flashPrizeWinner(category: String!, contestSlug: String!, criteria: String, duration: String): [JSON!]!

  """
  Get help subtopics and content
  """
  helpSubtopics(topic: String!): [HelpInfo!]!

  """
  Get Help Topics
  """
  helpTopics: [HelpInfo!]!
  id: ID!

  """
  Query me
  """
  me: User

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  onlineSubscribers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): OnlineSubscribersConnection
  onlineUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): OnlineUsersConnection

  """
  Query playground by slug
  """
  playground(slug: String!): Playground

  """
  Query user by slug
  """
  user(slug: String!): User

  """
  Get all verified hosts
  """
  verifiedHosts: [User!]!
}

"""
Autogenerated input type of RemoveContestTemplateFromPlayground
"""
input RemoveContestTemplateFromPlaygroundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ID!
  playground: ID!
}

"""
Autogenerated return type of RemoveContestTemplateFromPlayground
"""
type RemoveContestTemplateFromPlaygroundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ContestTemplate
  errors: [String!]!
  playground: Playground
}

"""
Autogenerated input type of RemoveEventPartyMember
"""
input RemoveEventPartyMemberInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestParticipant: ID!
  eventParty: ID!
}

"""
Autogenerated return type of RemoveEventPartyMember
"""
type RemoveEventPartyMemberPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: Contest
  errors: [String!]!
  eventParty: EventParty
}

"""
Autogenerated input type of RemoveModerator
"""
input RemoveModeratorInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ID!
  user: ID!
}

"""
Autogenerated return type of RemoveModerator
"""
type RemoveModeratorPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ContestTemplate
  errors: [String!]!
  me: User!
  user: User
}

"""
Autogenerated input type of ResolveProfileUpdateRequest
"""
input ResolveProfileUpdateRequestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  profileUpdateRequest: ID!
  resolution: String!
}

"""
Autogenerated return type of ResolveProfileUpdateRequest
"""
type ResolveProfileUpdateRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  profileUpdateRequest: ProfileUpdateRequest
  user: User
}

type Sponsor implements Node {
  id: ID!
  logoUrl: String
  name: String!
  url: String
}

"""
An edge in a connection.
"""
type SponsorsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sponsor
}

"""
Autogenerated input type of StartContest
"""
input StartContestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: ID!
}

"""
Autogenerated return type of StartContest
"""
type StartContestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: Contest
  errors: [String!]!
}

"""
Options for Stream Platform
"""
enum StreamPlatform {
  mixer
  twitch
  youtube
}

"""
Operators for filtering on strings
"""
input StringOperators {
  contains: String
  eq: String
}

"""
Autogenerated input type of UnfollowContest
"""
input UnfollowContestInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ID!
}

"""
Autogenerated return type of UnfollowContest
"""
type UnfollowContestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestTemplate: ContestTemplate
  errors: [String!]!
  me: User!
}

"""
Autogenerated input type of UnfollowUser
"""
input UnfollowUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  followee: ID!
}

"""
Autogenerated return type of UnfollowUser
"""
type UnfollowUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  me: User!
  user: User
}

"""
Autogenerated input type of UpdateMatch
"""
input UpdateMatchInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gameSlug: String
  message: String!
}

"""
Autogenerated return type of UpdateMatch
"""
type UpdateMatchPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  shouldAlert: Boolean!
}

"""
Autogenerated input type of UpdateNotificationSetting
"""
input UpdateNotificationSettingInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contestChange: Boolean
  contestDoorsOpen: Boolean
}

"""
Autogenerated return type of UpdateNotificationSetting
"""
type UpdateNotificationSettingPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Autogenerated input type of UpdatePartyScoreAdjustment
"""
input UpdatePartyScoreAdjustmentInput {
  adjustmentValue: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: ID!
  party: ID!
}

"""
Autogenerated return type of UpdatePartyScoreAdjustment
"""
type UpdatePartyScoreAdjustmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contest: Contest
  errors: [String!]!
  party: EventParty
}

"""
Autogenerated input type of UpdateUserBeaconMessage
"""
input UpdateUserBeaconMessageInput {
  beaconMessage: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of UpdateUserBeaconMessage
"""
type UpdateUserBeaconMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Autogenerated input type of UpdateUserBeaconStatus
"""
input UpdateUserBeaconStatusInput {
  beaconGame: String
  beaconStatus: UserBeaconStatus!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  userId: ID!
}

"""
Autogenerated return type of UpdateUserBeaconStatus
"""
type UpdateUserBeaconStatusPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Autogenerated input type of UpdateUserSettings
"""
input UpdateUserSettingsInput {
  beaconPrivacy: UserBeaconPrivacy

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  description: String
  discordName: String
  email: String
  newPassword: String
  oldPassword: String
  overwatchRank: String
  paypalEmail: String
  socialDiscord: String
  socialMixer: String
  socialPrivacyDiscord: String
  socialPrivacyMixer: String
  socialPrivacyTwitch: String
  socialPrivacyTwitter: String
  socialPrivacyYoutube: String
  socialTwitch: String
  socialTwitter: String
  socialYoutube: String
  streamLogin: String
  streamPlatform: String
  username: String
  venmoAccount: String
}

"""
Autogenerated return type of UpdateUserSettings
"""
type UpdateUserSettingsPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Autogenerated input type of UploadAvatar
"""
input UploadAvatarInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: ID!
}

"""
Autogenerated return type of UploadAvatar
"""
type UploadAvatarPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

type User implements Node {
  activeLiveSession: LiveSession
  amIFollowing: Boolean
  avatarUrl: String
  badges(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: BadgeFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): UserContestBadgesConnection
  beaconGame: String
  beaconGameName: String
  beaconMessage: String
  beaconPrivacy: UserBeaconPrivacy!
  beaconStatus: UserBeaconStatus
  createdPlaygrounds: [Playground!]
  description: String
  discordName: String
  email: String!
  followedContests(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: ContestTemplateFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): FollowedContestsConnection
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: UserFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): UserFollowersConnection
  following(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: UserFilters

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): UserFollowingsConnection
  id: ID!
  isClaimed: Boolean!
  isVerifiedHost: Boolean
  isVisorAdmin: Boolean!
  joinedPlaygrounds: [Playground!]
  liveSessions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): UserLiveSessionsConnection
  myContests: [ContestTemplate!]
  myModeratedContests: [ContestTemplate!]
  notificationSetting: NotificationSetting
  overwatchRank: String
  paypalEmail: String
  pendingRequestedProfileUpdates: [ProfileUpdateRequest!]
  rtmpUrl: String
  slug: String!
  socialDiscord: String
  socialLink: String
  socialMixer: String
  socialPrivacyDiscord: String
  socialPrivacyMixer: String
  socialPrivacyTwitch: String
  socialPrivacyTwitter: String
  socialPrivacyYoutube: String
  socialTwitch: String
  socialTwitter: String
  socialYoutube: String
  sponsors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sortBy: String
  ): UserSponsorsConnection
  streamKey: String
  streamLogin: String
  streamPlatform: StreamPlatform
  updatedAt: DateTime!
  username: String!
  venmoAccount: String
}

"""
user#beacon_privacy
"""
enum UserBeaconPrivacy {
  private
  public
}

"""
user#beacon_status
"""
enum UserBeaconStatus {
  offline
  online
}

"""
The connection type for Badge.
"""
type UserContestBadgesConnection {
  """
  A list of edges.
  """
  edges: [BadgesEdge]

  """
  A list of nodes.
  """
  nodes: [Badge]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Filters for users
"""
input UserFilters {
  email: StringOperators
  id: StringOperators
  slug: StringOperators
  username: StringOperators
}

"""
The connection type for User.
"""
type UserFollowersConnection {
  """
  A list of edges.
  """
  edges: [UsersEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The connection type for User.
"""
type UserFollowingsConnection {
  """
  A list of edges.
  """
  edges: [UsersEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The connection type for LiveSession.
"""
type UserLiveSessionsConnection {
  """
  A list of edges.
  """
  edges: [LiveSessionsEdge]

  """
  A list of nodes.
  """
  nodes: [LiveSession]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
The connection type for Sponsor.
"""
type UserSponsorsConnection {
  """
  A list of edges.
  """
  edges: [SponsorsEdge]

  """
  A list of nodes.
  """
  nodes: [Sponsor]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UsersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}